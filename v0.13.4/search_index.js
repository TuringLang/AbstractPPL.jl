var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#VarNames","page":"API","title":"VarNames","text":"","category":"section"},{"location":"api/#AbstractPPL.VarName","page":"API","title":"AbstractPPL.VarName","text":"VarName{sym}(optic=identity)\n\nA variable identifier for a symbol sym and optic optic.\n\nThe Julia variable in the model corresponding to sym can refer to a single value or to a hierarchical array structure of univariate, multivariate or matrix variables. The field lens stores the indices requires to access the random variable from the Julia variable indicated by sym as a tuple of tuples. Each element of the tuple thereby contains the indices of one optic operation.\n\nVarNames can be manually constructed using the VarName{sym}(optic) constructor, or from an optic expression through the @varname convenience macro.\n\nExamples\n\njulia> vn = VarName{:x}(Accessors.IndexLens((Colon(), 1)) ⨟ Accessors.IndexLens((2, )))\nx[:, 1][2]\n\njulia> getoptic(vn)\n(@o _[Colon(), 1][2])\n\njulia> @varname x[:, 1][1+1]\nx[:, 1][2]\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractPPL.getsym","page":"API","title":"AbstractPPL.getsym","text":"getsym(vn::VarName)\n\nReturn the symbol of the Julia variable used to generate vn.\n\nExamples\n\njulia> getsym(@varname(x[1][2:3]))\n:x\n\njulia> getsym(@varname(y))\n:y\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.getoptic","page":"API","title":"AbstractPPL.getoptic","text":"getoptic(vn::VarName)\n\nReturn the optic of the Julia variable used to generate vn.\n\nExamples\n\njulia> getoptic(@varname(x[1][2:3]))\n(@o _[1][2:3])\n\njulia> getoptic(@varname(y))\nidentity (generic function with 1 method)\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.inspace","page":"API","title":"AbstractPPL.inspace","text":"inspace(vn::Union{VarName, Symbol}, space::Tuple)\n\nCheck whether vn's variable symbol is in space.  The empty tuple counts as the \"universal space\" containing all variables. Subsumption (see subsumes) is respected.\n\nExamples\n\njulia> inspace(@varname(x[1][2:3]), ())\ntrue\n\njulia> inspace(@varname(x[1][2:3]), (:x,))\ntrue\n\njulia> inspace(@varname(x[1][2:3]), (@varname(x),))\ntrue\n\njulia> inspace(@varname(x[1][2:3]), (@varname(x[1:10]), :y))\ntrue\n\njulia> inspace(@varname(x[1][2:3]), (@varname(x[:][2:4]), :y))\ntrue\n\njulia> inspace(@varname(x[1][2:3]), (@varname(x[1:10]),))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.subsumes","page":"API","title":"AbstractPPL.subsumes","text":"subsumes(u::VarName, v::VarName)\n\nCheck whether the variable name v describes a sub-range of the variable u.  Supported indexing:\n\nScalar:\n\n```jldoctest   julia> subsumes(@varname(x), @varname(x[1, 2]))   true\n\njulia> subsumes(@varname(x[1, 2]), @varname(x[1, 2][3]))   true   ```\n\nArray of scalar: basically everything that fulfills issubset.\n\n```jldoctest   julia> subsumes(@varname(x[[1, 2], 3]), @varname(x[1, 3]))   true\n\njulia> subsumes(@varname(x[1:3]), @varname(x[2][1]))   true   ```\n\nSlices:\n\njldoctest   julia> subsumes(@varname(x[2, :]), @varname(x[2, 10][1]))   true\n\nCurrently not supported are: \n\nBoolean indexing, literal CartesianIndex (these could be added, though)\nLinear indexing of multidimensional arrays: x[4] does not subsume x[2, 2] for a matrix x\nTrailing ones: x[2, 1] does not subsume x[2] for a vector x\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.subsumedby","page":"API","title":"AbstractPPL.subsumedby","text":"subsumedby(t, u)\n\nTrue if t is subsumed by u, i.e., if subsumes(u, t) is true.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.vsym","page":"API","title":"AbstractPPL.vsym","text":"vsym(expr)\n\nReturn name part of the @varname-compatible expression expr as a symbol for input of the VarName constructor.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.@varname","page":"API","title":"AbstractPPL.@varname","text":"@varname(expr, concretize=false)\n\nA macro that returns an instance of VarName given a symbol or indexing expression expr.\n\nIf concretize is true, the resulting expression will be wrapped in a concretize() call.\n\nNote that expressions involving dynamic indexing, i.e. begin and/or end, will always need to be concretized as VarName only supports non-dynamic indexing as determined by is_static_optic. See examples below.\n\nExamples\n\nDynamic indexing\n\njulia> x = (a = [1.0 2.0; 3.0 4.0; 5.0 6.0], );\n\njulia> @varname(x.a[1:end, end][:], true)\nx.a[1:3, 2][:]\n\njulia> @varname(x.a[end], false)  # disable concretization\nERROR: LoadError: Variable name `x.a[end]` is dynamic and requires concretization!\n[...]\n\njulia> @varname(x.a[end])  # concretization occurs by default if deemed necessary\nx.a[6]\n\njulia> # Note that \"dynamic\" here refers to usage of `begin` and/or `end`,\n       # _not_ \"information only available at runtime\", i.e. the following works.\n       [@varname(x.a[i]) for i = 1:length(x.a)][end]\nx.a[6]\n\njulia> # Potentially surprising behaviour, but this is equivalent to what Base does:\n       @varname(x[2:2:5]), 2:2:5\n(x[2:2:4], 2:2:4)\n\nGeneral indexing\n\nUnder the hood optics are used for the indexing:\n\njulia> getoptic(@varname(x))\nidentity (generic function with 1 method)\n\njulia> getoptic(@varname(x[1]))\n(@o _[1])\n\njulia> getoptic(@varname(x[:, 1]))\n(@o _[Colon(), 1])\n\njulia> getoptic(@varname(x[:, 1][2]))\n(@o _[Colon(), 1][2])\n\njulia> getoptic(@varname(x[1,2][1+5][45][3]))\n(@o _[1, 2][6][45][3])\n\nThis also means that we support property access:\n\njulia> getoptic(@varname(x.a))\n(@o _.a)\n\njulia> getoptic(@varname(x.a[1]))\n(@o _.a[1])\n\njulia> x = (a = [(b = rand(2), )], ); getoptic(@varname(x.a[1].b[end], true))\n(@o _.a[1].b[2])\n\nInterpolation can be used for variable names, or array name, but not the lhs of a . expression. Variables within indices are always evaluated in the calling scope.\n\njulia> name, i = :a, 10;\n\njulia> @varname(x.$name[i, i+1])\nx.a[10, 11]\n\njulia> @varname($name)\na\n\njulia> @varname($name[1])\na[1]\n\njulia> @varname($name.x[1])\na.x[1]\n\njulia> @varname(b.$name.x[1])\nb.a.x[1]\n\n\n\n\n\n","category":"macro"},{"location":"api/#AbstractPPL.@vsym","page":"API","title":"AbstractPPL.@vsym","text":"@vsym(expr)\n\nA macro that returns the variable symbol given the input variable expression expr. For example, @vsym x[1] returns :x.\n\nExamples\n\njulia> @vsym x\n:x\n\njulia> @vsym x[1,1][2,3]\n:x\n\njulia> @vsym x[end]\n:x\n\n\n\n\n\n","category":"macro"},{"location":"api/#VarName-prefixing-and-unprefixing","page":"API","title":"VarName prefixing and unprefixing","text":"","category":"section"},{"location":"api/#AbstractPPL.prefix","page":"API","title":"AbstractPPL.prefix","text":"prefix(vn::VarName, prefix::VarName)\n\nAdd a prefix to a VarName.\n\njulia> AbstractPPL.prefix(@varname(x), @varname(y))\ny.x\n\njulia> AbstractPPL.prefix(@varname(x.a), @varname(y))\ny.x.a\n\njulia> AbstractPPL.prefix(@varname(x.a), @varname(y[1]))\ny[1].x.a\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.unprefix","page":"API","title":"AbstractPPL.unprefix","text":"unprefix(vn::VarName, prefix::VarName)\n\nRemove a prefix from a VarName.\n\njulia> AbstractPPL.unprefix(@varname(y.x), @varname(y))\nx\n\njulia> AbstractPPL.unprefix(@varname(y.x.a), @varname(y))\nx.a\n\njulia> AbstractPPL.unprefix(@varname(y[1].x), @varname(y[1]))\nx\n\njulia> AbstractPPL.unprefix(@varname(y), @varname(n))\nERROR: ArgumentError: could not remove prefix n from VarName y\n[...]\n\n\n\n\n\n","category":"function"},{"location":"api/#Extracting-values-corresponding-to-a-VarName","page":"API","title":"Extracting values corresponding to a VarName","text":"","category":"section"},{"location":"api/#AbstractPPL.hasvalue","page":"API","title":"AbstractPPL.hasvalue","text":"hasvalue(\n    vals::Union{AbstractDict,NamedTuple},\n    vn::VarName,\n    dist::Distribution;\n    error_on_incomplete::Bool=false\n)\n\nCheck if vals contains values for vn that is compatible with the distribution dist.\n\nThis is a more general version of hasvalue(vals, vn), in that even if vn itself is not inside vals, it further checks if vals contains sub-values of vn that can be used to reconstruct vn given dist.\n\nThe error_on_incomplete flag can be used to detect cases where some of the values needed for vn are present, but others are not. This may help to detect invalid cases where the user has provided e.g. data of the wrong shape.\n\nNote that this check is only possible if a Dict is passed, because the key type of a NamedTuple (i.e., Symbol) is not rich enough to carry indexing information. If this method is called with a NamedTuple, it will just defer to hasvalue(vals, vn).\n\nFor example:\n\njulia> d = Dict(@varname(x[1]) => 1.0, @varname(x[2]) => 2.0);\n\njulia> hasvalue(d, @varname(x), MvNormal(zeros(2), I))\ntrue\n\njulia> hasvalue(d, @varname(x), MvNormal(zeros(3), I))\nfalse\n\njulia> hasvalue(d, @varname(x), MvNormal(zeros(3), I); error_on_incomplete=true)\nERROR: only partial values for `x` found in the dictionary provided\n[...]\n\n\n\n\n\nhasvalue(vals::NamedTuple, vn::VarName)\nhasvalue(vals::AbstractDict{<:VarName}, vn::VarName)\n\nDetermine whether vals contains a value for a given vn.\n\nExamples\n\nWith x as a NamedTuple:\n\njulia> hasvalue((x = 1.0, ), @varname(x))\ntrue\n\njulia> hasvalue((x = 1.0, ), @varname(x[1]))\nfalse\n\njulia> hasvalue((x = [1.0],), @varname(x))\ntrue\n\njulia> hasvalue((x = [1.0],), @varname(x[1]))\ntrue\n\njulia> hasvalue((x = [1.0],), @varname(x[2]))\nfalse\n\nWith x as a AbstractDict:\n\njulia> hasvalue(Dict(@varname(x) => 1.0, ), @varname(x))\ntrue\n\njulia> hasvalue(Dict(@varname(x) => 1.0, ), @varname(x[1]))\nfalse\n\njulia> hasvalue(Dict(@varname(x) => [1.0]), @varname(x))\ntrue\n\njulia> hasvalue(Dict(@varname(x) => [1.0]), @varname(x[1]))\ntrue\n\njulia> hasvalue(Dict(@varname(x) => [1.0]), @varname(x[2]))\nfalse\n\nIn the AbstractDict case we can also have keys such as v[1]:\n\njulia> vals = Dict(@varname(x[1]) => [1.0,]);\n\njulia> hasvalue(vals, @varname(x[1])) # same as `haskey`\ntrue\n\njulia> hasvalue(vals, @varname(x[1][1])) # different from `haskey`\ntrue\n\njulia> hasvalue(vals, @varname(x[1][2]))\nfalse\n\njulia> hasvalue(vals, @varname(x[2][1]))\nfalse\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.getvalue","page":"API","title":"AbstractPPL.getvalue","text":"getvalue(\n    vals::Union{AbstractDict,NamedTuple},\n    vn::VarName,\n    dist::Distribution\n)\n\nRetrieve the value of vn from vals, using the distribution dist to reconstruct the value if necessary.\n\nThis is a more general version of getvalue(vals, vn), in that even if vn itself is not inside vals, it can still reconstruct the value of vn from sub-values of vn that are present in vals.\n\nNote that this reconstruction is only possible if a Dict is passed, because the key type of a NamedTuple (i.e., Symbol) is not rich enough to carry indexing information. If this method is called with a NamedTuple, it will just defer to getvalue(vals, vn).\n\nFor example:\n\njulia> d = Dict(@varname(x[1]) => 1.0, @varname(x[2]) => 2.0);\n\njulia> getvalue(d, @varname(x), MvNormal(zeros(2), I))\n2-element Vector{Float64}:\n 1.0\n 2.0\n\njulia> # Use `hasvalue` to check for this case before calling `getvalue`.\n       getvalue(d, @varname(x), MvNormal(zeros(3), I))\nERROR: `x` was not found in the dictionary provided\n[...]\n\n\n\n\n\ngetvalue(vals::NamedTuple, vn::VarName)\ngetvalue(vals::AbstractDict{<:VarName}, vn::VarName)\n\nReturn the value(s) in vals represented by vn.\n\nExamples\n\nFor NamedTuple:\n\njulia> vals = (x = [1.0],);\n\njulia> getvalue(vals, @varname(x)) # same as `getindex`\n1-element Vector{Float64}:\n 1.0\n\njulia> getvalue(vals, @varname(x[1])) # different from `getindex`\n1.0\n\njulia> getvalue(vals, @varname(x[2]))\nERROR: x[2] was not found in the NamedTuple provided\n[...]\n\nFor AbstractDict:\n\njulia> vals = Dict(@varname(x) => [1.0]);\n\njulia> getvalue(vals, @varname(x)) # same as `getindex`\n1-element Vector{Float64}:\n 1.0\n\njulia> getvalue(vals, @varname(x[1])) # different from `getindex`\n1.0\n\njulia> getvalue(vals, @varname(x[2]))\nERROR: x[2] was not found in the dictionary provided\n[...]\n\nIn the AbstractDict case we can also have keys such as v[1]:\n\njulia> vals = Dict(@varname(x[1]) => [1.0,]);\n\njulia> getvalue(vals, @varname(x[1])) # same as `getindex`\n1-element Vector{Float64}:\n 1.0\n\njulia> getvalue(vals, @varname(x[1][1])) # different from `getindex`\n1.0\n\njulia> getvalue(vals, @varname(x[1][2]))\nERROR: x[1][2] was not found in the dictionary provided\n[...]\n\njulia> getvalue(vals, @varname(x[2][1]))\nERROR: x[2][1] was not found in the dictionary provided\n[...]\n\njulia> getvalue(vals, @varname(x))\nERROR: x was not found in the dictionary provided\n[...]\n\nDictionaries can present ambiguous cases where the same variable is specified twice at different levels. In such a situation, getvalue attempts to find an exact match, and if that fails it returns the value with the most specific key.\n\nnote: Note\nIt is the user's responsibility to avoid such cases by ensuring that the dictionary passed in does not contain the same value specified multiple times.\n\njulia> vals = Dict(@varname(x) => [[1.0]], @varname(x[1]) => [2.0]);\n\njulia> # Here, the `x[1]` key is not used because `x` is an exact match.\n       getvalue(vals, @varname(x))\n1-element Vector{Vector{Float64}}:\n [1.0]\n\njulia> # Likewise, the `x` key is not used because `x[1]` is an exact match.\n       getvalue(vals, @varname(x[1]))\n1-element Vector{Float64}:\n 2.0\n\njulia> # No exact match, so the most specific key, i.e. `x[1]`, is used.\n       getvalue(vals, @varname(x[1][1]))\n2.0\n\n\n\n\n\n","category":"function"},{"location":"api/#Splitting-VarNames-up-into-components","page":"API","title":"Splitting VarNames up into components","text":"","category":"section"},{"location":"api/#AbstractPPL.varname_leaves","page":"API","title":"AbstractPPL.varname_leaves","text":"varname_leaves(vn::VarName, val)\n\nReturn an iterator over all varnames that are represented by vn on val.\n\nExamples\n\njulia> using AbstractPPL: varname_leaves\n\njulia> foreach(println, varname_leaves(@varname(x), rand(2)))\nx[1]\nx[2]\n\njulia> foreach(println, varname_leaves(@varname(x[1:2]), rand(2)))\nx[1:2][1]\nx[1:2][2]\n\njulia> x = (y = 1, z = [[2.0], [3.0]]);\n\njulia> foreach(println, varname_leaves(@varname(x), x))\nx.y\nx.z[1][1]\nx.z[2][1]\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.varname_and_value_leaves","page":"API","title":"AbstractPPL.varname_and_value_leaves","text":"varname_and_value_leaves(vn::VarName, val)\n\nReturn an iterator over all varname-value pairs that are represented by vn on val.\n\nExamples\n\njulia> using AbstractPPL: varname_and_value_leaves\n\njulia> foreach(println, varname_and_value_leaves(@varname(x), 1:2))\n(x[1], 1)\n(x[2], 2)\n\njulia> foreach(println, varname_and_value_leaves(@varname(x[1:2]), 1:2))\n(x[1:2][1], 1)\n(x[1:2][2], 2)\n\njulia> x = (y = 1, z = [[2.0], [3.0]]);\n\njulia> foreach(println, varname_and_value_leaves(@varname(x), x))\n(x.y, 1)\n(x.z[1][1], 2.0)\n(x.z[2][1], 3.0)\n\nThere is also some special handling for certain types:\n\njulia> using LinearAlgebra\n\njulia> x = reshape(1:4, 2, 2);\n\njulia> # `LowerTriangular`\n       foreach(println, varname_and_value_leaves(@varname(x), LowerTriangular(x)))\n(x[1, 1], 1)\n(x[2, 1], 2)\n(x[2, 2], 4)\n\njulia> # `UpperTriangular`\n       foreach(println, varname_and_value_leaves(@varname(x), UpperTriangular(x)))\n(x[1, 1], 1)\n(x[1, 2], 3)\n(x[2, 2], 4)\n\njulia> # `Cholesky` with lower-triangular\n       foreach(println, varname_and_value_leaves(@varname(x), Cholesky([1.0 0.0; 0.0 1.0], 'L', 0)))\n(x.L[1, 1], 1.0)\n(x.L[2, 1], 0.0)\n(x.L[2, 2], 1.0)\n\njulia> # `Cholesky` with upper-triangular\n       foreach(println, varname_and_value_leaves(@varname(x), Cholesky([1.0 0.0; 0.0 1.0], 'U', 0)))\n(x.U[1, 1], 1.0)\n(x.U[1, 2], 0.0)\n(x.U[2, 2], 1.0)\n\n\n\n\n\nvarname_and_value_leaves(container)\n\nReturn an iterator over all varname-value pairs that are represented by container.\n\nThis is the same as varname_and_value_leaves(vn::VarName, x) but over a container containing multiple varnames.\n\nSee also: varname_and_value_leaves(vn::VarName, x).\n\nExamples\n\njulia> using AbstractPPL: varname_and_value_leaves\n\njulia> using OrderedCollections: OrderedDict\n\njulia> # With an `AbstractDict` (we use `OrderedDict` here\n       # to ensure consistent ordering in doctests)\n       dict = OrderedDict(@varname(y) => 1, @varname(z) => [[2.0], [3.0]]);\n\njulia> foreach(println, varname_and_value_leaves(dict))\n(y, 1)\n(z[1][1], 2.0)\n(z[2][1], 3.0)\n\njulia> # With a `NamedTuple`\n       nt = (y = 1, z = [[2.0], [3.0]]);\n\njulia> foreach(println, varname_and_value_leaves(nt))\n(y, 1)\n(z[1][1], 2.0)\n(z[2][1], 3.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#VarName-serialisation","page":"API","title":"VarName serialisation","text":"","category":"section"},{"location":"api/#AbstractPPL.index_to_dict","page":"API","title":"AbstractPPL.index_to_dict","text":"index_to_dict(::Integer)\nindex_to_dict(::AbstractVector{Int})\nindex_to_dict(::UnitRange)\nindex_to_dict(::StepRange)\nindex_to_dict(::Colon)\nindex_to_dict(::ConcretizedSlice{T, Base.OneTo{I}}) where {T, I}\nindex_to_dict(::Tuple)\n\nConvert an index i to a dictionary representation.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.dict_to_index","page":"API","title":"AbstractPPL.dict_to_index","text":"dict_to_index(dict)\ndict_to_index(symbol_val, dict)\n\nConvert a dictionary representation of an index dict to an index.\n\nUsers can extend the functionality of dict_to_index (and hence VarName de/serialisation) by extending this method along with index_to_dict. Specifically, suppose you have a custom index type MyIndexType and you want to be able to de/serialise a VarName containing this index type. You should then implement the following two methods:\n\nAbstractPPL.index_to_dict(i::MyModule.MyIndexType) should return a dictionary representation of the index i. This dictionary must contain the key \"type\", and the corresponding value must be a string that uniquely identifies the index type. Generally, it makes sense to use the name of the type (perhaps prefixed with module qualifiers) as this value to avoid clashes. The remainder of the dictionary can have any structure you like.\nSuppose the value of index_to_dict(i)[\"type\"] is \"MyModule.MyIndexType\". You should then implement the corresponding method AbstractPPL.dict_to_index(::Val{Symbol(\"MyModule.MyIndexType\")}, dict), which should take the dictionary representation as the second argument and return the original MyIndexType object.\n\nTo see an example of this in action, you can look in the the AbstractPPL test suite, which contains a test for serialising OffsetArrays.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.varname_to_string","page":"API","title":"AbstractPPL.varname_to_string","text":"varname_to_string(vn::VarName)\n\nConvert a VarName as a string, via an intermediate dictionary. This differs from string(vn) in that concretised slices are faithfully represented (rather than being pretty-printed as colons).\n\nFor VarNames which index into an array, this function will only work if the indices can be serialised. This is true for all standard Julia index types, but if you are using custom index types, you will need to implement the index_to_dict and dict_to_index methods for those types. See the documentation of dict_to_index for instructions on how to do this.\n\njulia> varname_to_string(@varname(x))\n\"{\\\"optic\\\":{\\\"type\\\":\\\"identity\\\"},\\\"sym\\\":\\\"x\\\"}\"\n\njulia> varname_to_string(@varname(x.a))\n\"{\\\"optic\\\":{\\\"field\\\":\\\"a\\\",\\\"type\\\":\\\"property\\\"},\\\"sym\\\":\\\"x\\\"}\"\n\njulia> y = ones(2); varname_to_string(@varname(y[:]))\n\"{\\\"optic\\\":{\\\"indices\\\":{\\\"values\\\":[{\\\"type\\\":\\\"Base.Colon\\\"}],\\\"type\\\":\\\"Base.Tuple\\\"},\\\"type\\\":\\\"index\\\"},\\\"sym\\\":\\\"y\\\"}\"\n\njulia> y = ones(2); varname_to_string(@varname(y[:], true))\n\"{\\\"optic\\\":{\\\"indices\\\":{\\\"values\\\":[{\\\"range\\\":{\\\"stop\\\":2,\\\"type\\\":\\\"Base.OneTo\\\"},\\\"type\\\":\\\"AbstractPPL.ConcretizedSlice\\\"}],\\\"type\\\":\\\"Base.Tuple\\\"},\\\"type\\\":\\\"index\\\"},\\\"sym\\\":\\\"y\\\"}\"\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.string_to_varname","page":"API","title":"AbstractPPL.string_to_varname","text":"string_to_varname(str::AbstractString)\n\nConvert a string representation of a VarName back to a VarName. The string should have been generated by varname_to_string.\n\n\n\n\n\n","category":"function"},{"location":"api/#Abstract-model-functions","page":"API","title":"Abstract model functions","text":"","category":"section"},{"location":"api/#AbstractPPL.AbstractProbabilisticProgram","page":"API","title":"AbstractPPL.AbstractProbabilisticProgram","text":"AbstractProbabilisticProgram\n\nCommon base type for models expressed as probabilistic programs.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractPPL.condition","page":"API","title":"AbstractPPL.condition","text":"condition(model, observations)\n\nCondition the generative model model on some observed data, creating a new model of the (possibly unnormalized) posterior distribution over them.\n\nobservations can be of any supported internal trace type, or a fixed probability expression.\n\nThe invariant \n\nm = decondition(condition(m, obs))\n\nshould hold for generative models m and arbitrary obs.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.decondition","page":"API","title":"AbstractPPL.decondition","text":"decondition(conditioned_model)\n\nRemove the conditioning (i.e., observation data) from conditioned_model, turning it into a generative model over prior and observed variables.\n\nThe invariant \n\nm == condition(decondition(m), obs)\n\nshould hold for models m with conditioned variables obs.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.fix","page":"API","title":"AbstractPPL.fix","text":"fix(model, params)\n\nFix the values of parameters specified in params within the probabilistic model model.  This operation is equivalent to treating the fixed parameters as being drawn from a point mass  distribution centered at the values specified in params. Thus these parameters no longer contribute to the accumulated log density. \n\nConceptually, this is similar to Pearl's do-operator in causal inference, where we intervene  on variables by setting them to specific values, effectively cutting off their dependencies  on their usual causes in the model.\n\nThe invariant\n\nm == unfix(fix(m, params))\n\nshould hold for any model m and parameters params.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.unfix","page":"API","title":"AbstractPPL.unfix","text":"unfix(model)\n\nRemove any fixed parameters from the model model, returning a new model without the fixed parameters.\n\nThis function reverses the effect of fix by removing parameter constraints that were previously set. It returns a new model where all previously fixed parameters are allowed to vary according to their  original distributions in the model.\n\nThe invariant\n\nm == unfix(fix(m, params))\n\nshould hold for any model m and parameters params.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logdensityof","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(model, trace)\n\nEvaluate the (possibly unnormalized) density of the model specified by the probabilistic program in model, at specific values for the random variables given through trace.\n\ntrace can be of any supported internal trace type, or a fixed probability expression.\n\nlogdensityof should interact with conditioning and deconditioning in the way required by probability theory.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractPPL.AbstractContext","page":"API","title":"AbstractPPL.AbstractContext","text":"AbstractContext\n\nCommon base type for evaluation contexts.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractPPL.evaluate!!","page":"API","title":"AbstractPPL.evaluate!!","text":"evaluate!!\n\nGeneral API for model operations, e.g. prior evaluation, log density, log joint etc.\n\n\n\n\n\n","category":"function"},{"location":"api/#Abstract-traces","page":"API","title":"Abstract traces","text":"","category":"section"},{"location":"api/#AbstractPPL.AbstractModelTrace","page":"API","title":"AbstractPPL.AbstractModelTrace","text":"AbstractModelTrace\n\nCommon base class for various trace or \"variable info\" types.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Interface-(outdated)","page":"Interface (outdated)","title":"Interface (outdated)","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The original goal of AbstractPPL.jl was to provide a common interface for probabilistic programming. This should facilitate reuse of functions in modelling languages, to allow end users to handle models in a consistent way, and to simplify interaction between different languages and sampler implementations, from very rich, dynamic languages like Turing.jl to highly constrained or simplified models such as GPs, GLMs, or plain log-density problems.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Whilst its current implementation does not do this, there are certain desiderata for such an interface, which are outlined in this page.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"danger: Danger\nPlease note that this page reflects a discussion as of several years ago, and the implementation of DynamicPPL.jl has evolved not totally in sync with the ideas presented here. This page should be considered more aspirational rather than an accurate reflection of the current DynamicPPL.jl codebase.","category":"page"},{"location":"interface/#AbstractProbabilisticProgram-interface-(still-somewhat-drafty)","page":"Interface (outdated)","title":"AbstractProbabilisticProgram interface (still somewhat drafty)","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There are at least two somewhat incompatible conventions used for the term \"model\". None of this is particularly exact, but:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"In Turing.jl, if you write down a @model function and call it on arguments, you get a model object paired with (a possibly empty set of) observations. This can be treated as instantiated \"conditioned\" object with fixed values for parameters and observations.\nIn Soss.jl, \"model\" is used for a symbolic \"generative\" object from which concrete functions, such as densities and sampling functions, can be derived, and which you can later condition on (and in turn get a conditional density etc.).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Relevant discussions: 1, 2.","category":"page"},{"location":"interface/#TL/DR:","page":"Interface (outdated)","title":"TL/DR:","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There are three interrelating aspects that this interface intends to standardize:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Density calculation\nSampling\n\"Conversions\" between different conditionings of models","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Therefore, the interface consists of an AbstractProbabilisticProgram supertype, together with functions","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"condition(::Model, ::Trace) -> ConditionedModel\ndecondition(::ConditionedModel) -> GenerativeModel\nsample(::Model, ::Sampler = Exact(), [Int]) (from AbstractMCMC.sample)\nlogdensityof(::Model, ::Trace) and densityof(::Model, ::Trace) (from DensityInterface.jl)","category":"page"},{"location":"interface/#Traces-and-probability-expressions","page":"Interface (outdated)","title":"Traces and probability expressions","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"First, an infrastructural requirement which we will need below to write things out.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The kinds of models we consider are, at least in a theoretical sense, distributions over traces – types which carry collections of values together with their names. Existing realizations of these are VarInfo in Turing.jl, choice maps in Gen.jl, and the usage of named tuples in Soss.jl.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Traces solve the problem of having to name random variables in function calls, and in samples from models. In essence, every concrete trace type will just be a fancy kind of dictionary from variable names (ideally, VarNames) to values.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Since we have to use this kind of mapping a lot in the specification of the interface, let's for now just choose some arbitrary macro-like syntax like the following:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"@T(Y[1] = …, Z = …)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Some more ideas for this kind of object can be found at the end.","category":"page"},{"location":"interface/#\"Conversions\"","page":"Interface (outdated)","title":"\"Conversions\"","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The purpose of this part is to provide common names for how we want a model instance to be understood. As we have seen, in some modelling languages, model instances are primarily generative, with some parameters fixed, while other instance types pair model instances conditioned on observations. What I call \"conversions\" here is just an interface to transform between these two views and unify the involved objects under one language.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Let's start from a generative model with parameter μ:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"# (hypothetical) generative spec a la Soss\n@generative_model function foo_gen(μ)\n    X ~ Normal(0, μ)\n    Y[1] ~ Normal(X)\n    return Y[2] ~ Normal(X + 1)\nend","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Applying the \"constructor\" foo_gen now means to fix the parameter, and should return a concrete object of the generative type:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"g = foo_gen(; μ=…)::SomeGenerativeModel","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"With this kind of object, we should be able to sample and calculate joint log-densities from, i.e., over the combined trace space of X, Y[1], and Y[2] – either directly, or by deriving the respective functions (e.g., by converting form a symbolic representation).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"For model types that contain enough structural information, it should then be possible to condition on observed values and obtain a conditioned model:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"condition(g, @T(Y = …))::SomeConditionedModel","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"For this operation, there will probably exist syntactic sugar in the form of","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"g | @T(Y = …)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Now, if we start from a Turing.jl-like model instead, with the \"observation part\" already specified, we have a situation like this, with the observations Y fixed in the instantiation:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"# conditioned spec a la DynamicPPL\n@model function foo(Y, μ)\n    X ~ Normal(0, μ)\n    Y[1] ~ Normal(X)\n    return Y[2] ~ Normal(X + 1)\nend\n\nm = foo(; Y=…, μ=…)::SomeConditionedModel","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"From this we can, if supported, go back to the generative form via decondition, and back via condition:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"decondition(m) == g::SomeGenerativeModel\nm == condition(g, @T(Y = …))","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"(with equality in distribution).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"In the case of Turing.jl, the object m would at the same time contain the information about the generative and posterior distribution condition and decondition can simply return different kinds of \"tagged\" model types which put the model specification into a certain context.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Soss.jl pretty much already works like the examples above, with one model object being either a JointModel or a ConditionedModel, and the | syntax just being sugar for the latter.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"A hypothetical DensityModel, or something like the types from LogDensityProblems.jl, would be a case for a model type that does not support the structural operations condition and decondition.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The invariances between these operations should follow normal rules of probability theory. Not all methods or directions need to be supported for every modelling language; in this case, a MethodError or some other runtime error should be raised.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There is no strict requirement for generative models and conditioned models to have different types or be tagged with variable names etc. This is a choice to be made by the concrete implementation.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Decomposing models into prior and observation distributions is not yet specified; the former is rather easy, since it is only a marginal of the generative distribution, while the latter requires more structural information. Perhaps both can be generalized under the query function I discuss at the end.","category":"page"},{"location":"interface/#Sampling","page":"Interface (outdated)","title":"Sampling","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Sampling in this case refers to producing values from the distribution specified in a model instance, either following the distribution exactly, or approximating it through a Monte Carlo algorithm.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"All sampleable model instances are assumed to implement the AbstractMCMC interface. The most important aspect is sample, though, which plays the role of rand for distributions.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The results of sample generalize rand – while rand(d, N) is assumed to give you iid samples, sample(m, sampler, N) returns a sample from a sequence (known as chain in the case of MCMC) of length N approximating m's distribution by a specific sampling algorithm (which of course subsumes the case that m can be sampled from exactly, in which case the \"chain\" actually is iid).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Depending on which kind of sampling is supported, several methods may be supported. In the case of a (posterior) conditioned model with no known sampling procedure, we just have what is given through AbstractMCMC:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"sample([rng], m, N, sampler; [args]) # chain of length N using `sampler`","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"In the case of a generative model, or a posterior model with exact solution, we can have some more methods without the need to specify a sampler:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"sample([rng], m; [args])    # one random sample\nsample([rng], m, N; [args]) # N iid samples; equivalent to `rand` in certain cases","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"It should be possible to implement this by a special sampler, say, Exact (name still to be discussed), that can then also be reused for generative sampling:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"step(g, spl = Exact(), state = nothing) # IID sample from exact distribution with trivial state\nsample(g, Exact(), [N]) ","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"with dispatch failing for models types for which exact sampling is not possible (or not implemented).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"This could even be useful for Monte Carlo methods not being based on Markov chains, e.g., particle-based sampling using a return type with weights, or rejection sampling.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Not all variants need to be supported – for example, a posterior model might not support sample(m) when exact sampling is not possible, only sample(m, N, alg) for Markov chains.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"rand is then just a special case when \"trivial\" exact sampling works for a model, e.g. a joint model.","category":"page"},{"location":"interface/#Density-Evaluation","page":"Interface (outdated)","title":"Density Evaluation","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"danger: Danger\nNote that DensityInterface.jl has not had any substantial updates since 2021. As such, this section should be considered in a more general sense without ties to any particular package. DynamicPPL.jl does not make use of DensityInterface.jl; instead, DynamicPPL currently uses the interface specified by LogDensityProblems.jl.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Since the different \"versions\" of how a model is to be understood as generative or conditioned are to be expressed in the type or dispatch they support, there should be no need for separate functions logjoint, loglikelihood, etc., which force these semantic distinctions on the implementor; we therefore adapt the interface of DensityInterface.jl. Its main function logdensityof should suffice for variants, with the distinction being made by the capabilities of the concrete model instance.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"DensityInterface.jl also requires the trait function DensityKind, which is set to HasDensity() for the AbstractProbabilisticProgram type.  Additional functions","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"DensityInterface.densityof(d, x) = exp(logdensityof(d, x))\nDensityInterface.logdensityof(d) = Base.Fix1(logdensityof, d)\nDensityInterface.densityof(d) = Base.Fix1(densityof, d)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"are provided automatically (repeated here for clarity).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Note that logdensityof strictly generalizes logpdf, since the posterior density will of course in general be unnormalized and hence not a probability density.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The evaluation will usually work with the internal, concrete trace type, like VarInfo in Turing.jl:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"logdensityof(m, vi)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"But the user will more likely work on the interface using probability expressions:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"logdensityof(m, @T(X = …))","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Densities need (and usually, will) not be normalized.","category":"page"},{"location":"interface/#Implementation-notes","page":"Interface (outdated)","title":"Implementation notes","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"It should be able to make this fall back on the internal method with the right definition and implementation of maketrace:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"logdensityof(m, t::ProbabilityExpression) = logdensityof(m, maketrace(m, t))","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There is one open question – should normalized and unnormalized densities be able to be distinguished? This could be done by dispatch as well, e.g., if the caller wants to ensure normalization:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"logdensityof(g, @T(X = …, Y = …, Z = …); normalized=Val{true})","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Although there is proably a better way through traits; maybe like for arrays, with NormalizationStyle(g, t) = IsNormalized()?","category":"page"},{"location":"interface/#More-on-probability-expressions","page":"Interface (outdated)","title":"More on probability expressions","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Note that this needs to be a macro, if written this way, since the keys may themselves be more complex than just symbols (e.g., indexed variables.) (Don't hang yourselves up on that @T name though, this is just a working draft.)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The idea here is to standardize the construction (and manipulation) of abstract probability expressions, plus the interface for turning them into concrete traces for a specific model – like @formula and apply_schema from StatsModels.jl are doing.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Maybe the following would suffice to do that:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"maketrace(m, t)::tracetype(m, t)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"where maketrace produces a concrete trace corresponding to t for the model m, and tracetype is the corresponding eltype–like function giving you the concrete trace type for a certain model and probability expression combination.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Possible extensions of this idea:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Perl-style do-notation: @T(Y = y | do(X = x))\nAllowing free variables, to specify model transformations: query(m, @T(X | Y))\n\"Graph queries\": @T(X | Parents(X)), @T(Y | Not(X)) (a nice way to express Gibbs conditionals!)\nPredicate style for \"measure queries\": @T(X < Y + Z)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The latter applications are the reason I originally liked the idea of the macro being called @P (or even @𝓅 or @ℙ), since then it would look like a \"Bayesian probability expression\": @P(X < Y + Z). But this would not be so meaningful in the case of representing a trace instance.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Perhaps both @T and @P can coexist, and both produce different kinds of ProbabilityExpression objects?","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"NB: the exact details of this kind of \"schema application\", and what results from it, will need to be specified in the interface of AbstractModelTrace, aka \"the new VarInfo\".","category":"page"},{"location":"interface/#AbstractModelTrace/VarInfo-interface-draft","page":"Interface (outdated)","title":"AbstractModelTrace/VarInfo interface draft","text":"","category":"section"},{"location":"interface/#Background","page":"Interface (outdated)","title":"Background","text":"","category":"section"},{"location":"interface/#Why-do-we-do-this?","page":"Interface (outdated)","title":"Why do we do this?","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"As I have said before:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There are many aspects that make VarInfo a very complex data structure.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Currently, there is an insane amount of complexity and implementation details in DynamicPPL.jl's varinfo.jl, which has been rewritten multiple times with different concerns in mind – most times to improve concrete needs of Turing.jl, such as type stability, or requirements of specific samplers.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"This unfortunately makes VarInfo extremely opaque: it is hard to refactor without breaking anything (nobody really dares touching it), and a lot of knowledge about Turing.jl/DynamicPPL.jl internals is needed in order to judge the effects of changes.","category":"page"},{"location":"interface/#Design-choices","page":"Interface (outdated)","title":"Design choices","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Recently, @torfjelde has shown that a much simpler implementation is feasible – basically, just a wrapped NamedTuple with a minimal interface.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The purpose of this proposal is twofold: first, to think about what a sufficient interface for AbstractModelTrace, the abstract supertype of VarInfo, should be, to allow multiple specialized variants and refactor the existing ones (typed/untyped and simple). Second, to view the problem as the design of an abstract data type: the specification of construction and modification mechanisms for a dictionary-like structure.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Related previous discussions:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Discussion about VarName\nAbstractVarInfo representation","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Additionally (but closely related), the second part tries to formalize the \"subsumption\" mechanism of VarNames, and its interaction with using VarNames as keys/indices.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Our discussions take place in what is a bit of a fuzzy zone between the part that is really \"abstract\", and meant for the wider purpuse of AbstractPPL.jl – the implementation of probabilistic programming systems in general – and our concrete needs within DPPL. I hope to always stay abstract and reusable; and there are already a couple of candidates for APPL clients other than DPPL, which will hopefully keep us focused: simulation based calibration, SimplePPL (a BUGS-like frontend), and ParetoSmoothing.jl.","category":"page"},{"location":"interface/#What-is-going-to-change?","page":"Interface (outdated)","title":"What is going to change?","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"For the end user of Turing.jl: nothing. You usually don't use VarInfo, or the raw evaluator interface, anyways. (Although if the newer data structures are more user-friendly, they might occur in more places in the future?)\nFor people having a look into code using VarInfo, or starting to hack on Turing.jl/DPPL.jl: a huge reduction in cognitive complexity. VarInfo implementations should be readable on their own, and the implemented functions layed out somewhere. Its usages should look like for any other nice, normal data structure.\nFor core DPPL.jl implementors: same as the previous, plus: a standard against which to improve and test VarInfo, and a clearly defined design space for new data structures.\nFor AbstractPPL.jl clients/PPL implementors: an interface to program against (as with the rest of APPL), and an existing set of well-specified, flexible trace data types with different characteristics.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"And in terms of implementation work in DPPL.jl: once the interface is fixed (or even during fixing it), varinfo.jl will undergo a heavy refactoring – which should make it simpler! (No three different getter functions with slightly different semantics, etc…).","category":"page"},{"location":"interface/#Property-interface","page":"Interface (outdated)","title":"Property interface","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The basic idea is for all VarInfos to behave like ordered dictionaries with VarName keys – all common operations should just work. There are two things that make them more special, though:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"\"Fancy indexing\": since VarNames are structured themselves, the VarInfo should be have a bit like a trie, in the sense that all prefixes of stored keys should be retrievable.  Also, subsumption of VarNames should be respected (see end of this document):\nvi[@varname(x.a)] = [1, 2, 3]\nvi[@varname(x.b)] = [4, 5, 6]\nvi[@varname(x.a[2])] == 2\nvi[@varname(x)] == (; a=[1, 2, 3], b=[4, 5, 6])\nGeneralizations that go beyond simple cases (those that you can imagine by storing individual setfield!s in a tree) need not be implemented in the beginning; e.g.,\nvi[@varname(x[1])] = 1\nvi[@varname(x[2])] = 2\nkeys(vi) == [x[1], x[2]]\n\nvi[@varname(x)] = [1, 2]\nkeys(vi) == [x]\n(This has to be discussed further.)  Information other than the sampled values, such as flags, metadata, pointwise likelihoods, etc., can in principle be stored in multiple of these \"VarInfo dicts\" with parallel structure.  For efficiency, it is thinkable to devise a design such that multiple fields can be stored under the same indexing structure.\nvi[@varname(x[1])] == 1\nvi[@varname(x[1])].meta[\"bla\"] == false\nor something in that direction.\n(This is logically equivalent to a dictionary with named tuple values.  Maybe we can do what DictTable does?)\nThe old order field, indicating at which position in the evaluator function a variable has been added (essentially a counter of insertions) can actually be left out completely, since the dictionary is specified to be ordered by insertion.\nThe important question here is: should the \"joint data structure\" behave like a dictionary of NamedTuples (eltype(vi) == @NamedTuple{value::T, ℓ::Float64, meta}), or like a struct of dicts with shared keys (eltype(vi.value) <: T, eltype(vi.ℓ) <: Float64, …)?","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The required dictionary functions are about the following:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Pure functions:\niterate, yielding pairs of VarName and the stored value\nIteratorEltype == HasEltype(), IteratorSize = HasLength()\nkeys, values, pairs, length consistent with iterate\neltype, keytype, valuetype\nget, getindex, haskey for indexing by VarName\nmerge to join two VarInfos\nMutating functions:\ninsert!!, set!!\nmerge!! to add and join elements (TODO: think about merge)\nsetindex!!\nempty!!, delete!!, unset!! (Are these really used anywhere? Not having them makes persistent implementations much easier!)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"I believe that adopting the interface of Dictionaries.jl, not Base.AbstractDict, would be ideal, since their approach make key sharing and certain operations naturally easy (particularly \"broadcast-style\", i.e., transformations on the values, but not the keys).","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Other Base functions, like enumerate, should follow from the above.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"length might appear weird – but it should definitely be consistent with the iterator.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"It would be really cool if merge supported the combination of distinct types of implementations, e.g., a dynamic and a tuple-based part.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"To support both mutable and immutable/persistent implementations, let's require consistent BangBang.jl style mutators throughout.","category":"page"},{"location":"interface/#Transformations/Bijectors","page":"Interface (outdated)","title":"Transformations/Bijectors","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Transformations should ideally be handled explicitly and from outside: automatically by the compiler macro, or at the places required by samplers.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Implementation-wise, they can probably be expressed as folds?","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"map(v -> link(v.dist, v.value), vi)","category":"page"},{"location":"interface/#Linearization","page":"Interface (outdated)","title":"Linearization","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"There are multiple possible approaches to handle this:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"As a special case of conversion: Vector(vi)\ncopy!(vals_array, vi).\nAs a fold: mapreduce(v -> vec(v.value), append!, vi, init=Float64[])","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Also here, I think that the best implementation would be through a fold. Variants (1) or (2) might additionally be provided as syntactic sugar.","category":"page"},{"location":"interface/#VarName-based-axioms","page":"Interface (outdated)","title":"VarName-based axioms","text":"","category":"section"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"What follows is mostly an attempt to formalize subsumption.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"First, remember that in Turing.jl we can always work with concretized VarNames: begin/end, :, and boolean indexing are all turned into some form of concrete cartesian or array indexing (assuming this suggestion being implemented). This makes all index comparisons static.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Now, VarNames have a compositional structure: they can be built by composing a root variable with more and more lenses (VarName{v}() starts off with an IdentityLens):","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"julia> Accessors.IndexLens((2,)) ∘ Accessors.IndexLens((1:10, 1)) ∘ VarName{:x}()\nx[1:10, 1][2]","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"By \"subsumption\", we mean the notion of a VarName expressing a more nested path than another one:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"subsumes(@varname(x.a), @varname(x.a[1]))\n@varname(x.a) ⊒ @varname(x.a[1]) # \\sqsupseteq\n@varname(x.a) ⋢ @varname(x.a[1]) # \\nsqsubseteq","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Thus, we have the following axioms for VarNames (\"variables\" are VarName{n}()):","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"x ⊑ x for all variables x\nx ≍ y for x ≠ y (i.e., distinct variables are incomparable; x ⋢ y and y ⋢ x) (≍ is \\asymp)\nx ∘ ℓ ⊑ x for all variables x and lenses ℓ\nx ∘ ℓ₁ ⊑ x ∘ ℓ₂ ⇔ ℓ₁ ⊑ ℓ₂","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"For the last axiom to work, we also have to define subsumption of individual, non-composed lenses:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"PropertyLens(a) == PropertyLens(b) ⇔ a == b, for all symbols a, b\nFunctionLens(f) == FunctionLens(g) ⇔ f == g (under extensional equality; I'm only mentioning this in case we ever generalize to Bijector-ed variables like @varname(log(x)))\nIndexLens(ι₁) ⊑ IndexLens(ι₂) if the index tuple ι₂ covers all indices in ι₁; for example, _[1, 2:10] ⊑ _[1:10, 1:20].  (This is a bit fuzzy and not all corner cases have been considered yet!)\nIdentityLens() == IdentityLens()\nℓ₁ ≍ ℓ₂, otherwise","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Together, this should make VarNames under subsumption a reflexive poset.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"The fundamental requirement for VarInfos is then:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"vi[x ∘ ℓ] == get(vi[x], ℓ)","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"So we always want the following to work, automatically:","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"vi = insert!!(vi, vn, x)\nvi[vn] == x","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"(the trivial case), and","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"x = set!!(x, ℓ₁, a)\nx = set!!(x, ℓ₂, b)\nvi = insert!!(vi, vn, x)\nvi[vn ∘ ℓ₁] == a\nvi[vn ∘ ℓ₂] == b","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"since vn subsumes both vn ∘ ℓ₁ and vn ∘ ℓ₂.","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"Whether the opposite case is supported may depend on the implementation. The most complicated part is \"unification\":","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"vi = insert!!(vi, vn ∘ ℓ₁, a)\nvi = insert!!(vi, vn ∘ ℓ₂, b)\nget(vi[vn], ℓ₁) == a\nget(vi[vn], ℓ₂) == b","category":"page"},{"location":"interface/","page":"Interface (outdated)","title":"Interface (outdated)","text":"where vn ∘ ℓ₁ and vn ∘ ℓ₂ need to be recognized as \"children\" of a common parent vn.","category":"page"},{"location":"#AbstractPPL.jl","page":"AbstractPPL.jl","title":"AbstractPPL.jl","text":"","category":"section"},{"location":"","page":"AbstractPPL.jl","title":"AbstractPPL.jl","text":"A lightweight package containing interfaces and associated APIs for modelling languages for probabilistic programming.","category":"page"}]
}
